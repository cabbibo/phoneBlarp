
#pragma kernel Forward

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;
RWStructuredBuffer<float4> _AudioBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;
int _AudioBuffer_COUNT;
#include "../Chunks/safeID.cginc"

float3 _CameraLeft;

Texture2D<float4> _AudioMap;
SamplerState sampler_AudioMap;


float3 _CameraRight;
float3 _CameraUp;
float3 _CameraForward;
float _Radius;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Forward(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int particleID = pID / 4;


    Vert p = _SkeletonBuffer[safeID(particleID,_SkeletonBuffer_COUNT)];

    int idInParticle = pID % 4;
    int row = idInParticle / 2;
    int col = pID % 2;

    float3 l = _CameraRight;//normalize(cross(p.nor,float3(0,1,0)));
    float3 u = _CameraUp;//normalize(cross(p.nor,l));

    l *= (float(col)-.5);
    u *= (float(row)-.5);

    float v = ( float(particleID) / float(_SkeletonBuffer_COUNT));// * float(_AudioBuffer_COUNT);
    float4 aVal = _AudioBuffer[int( v  )];


float4 c = _AudioMap.SampleLevel(sampler_AudioMap, float2(v,0), 0);
    float3 fPos = p.pos + (l + u) *  _Radius *clamp(length(c),0,.2) * 5;//* length(aVal);

    float2 fUV = float2( float(row) , float(col) );

    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = fPos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = p.vel;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].uv = fUV;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].nor = p.nor;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].debug = float2( particleID , p.debug.y );


}



