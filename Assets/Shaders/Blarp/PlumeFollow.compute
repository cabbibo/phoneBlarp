#pragma kernel Follow


#include "../Chunks/noise.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"


float3 _Leader;




struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tang;
  float2 uv;
  float2 debug;
};


RWStructuredBuffer<Vert> _VertBuffer;
uint _VertBuffer_COUNT;

RWStructuredBuffer<Vert> _SkeletonBuffer;
uint _SkeletonBuffer_COUNT;

uint _PlumeSize;

#include "../Chunks/safeID.cginc"


#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void Follow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  uint pID = threadID + u3GroupID.x * NR_THREADS;
  uint bID = pID / _PlumeSize;
  uint sID = pID % _PlumeSize;
  if( pID < _VertBuffer_COUNT ){

    pID = safeID( pID , _VertBuffer_COUNT );
    Vert vert = _VertBuffer[pID];
    Vert base = _SkeletonBuffer[safeID( bID , _SkeletonBuffer_COUNT )];

    float3 force;

    force = 0;
    force -= (vert.pos - base.pos) * .1;

    for(int i = 0; i < _PlumeSize; i++ ){

      if( i != sID ){

        int fID = bID * _PlumeSize + i;

        Vert oV = _VertBuffer[safeID(fID,_VertBuffer_COUNT)];
      
      float3 dif = oV.pos - vert.pos;

      if( length( dif ) > 0 ){
        force -= normalize(dif) * .01;// * .00000001;
      }
        //if( oV.pos.x == vert.pos.x ){ vert.pos.x += hash( float(pID) ); }
      }


    }


   
    if( vert.pos.x == 0 ){
      vert.pos.x = 10000;;//*hash( float(pID));
      vert.pos.y = 10000;;//*hash( float(pID * 20));
      vert.pos.z = 10000;;//*hash( float(pID * 100));
    }

    vert.vel += force * .1;
    vert.pos += vert.vel;
    vert.vel *= .9;

    if( length( _SkeletonBuffer[0].pos - vert.pos ) > 30 ){
      vert.pos = _SkeletonBuffer[0].pos;

      vert.pos.x += .1 * hash( float(pID));
      vert.pos.y += .1 * hash( float(pID * 20));
      vert.pos.z += .1 * hash( float(pID * 100));
      vert.vel = 0;
    }



    _VertBuffer[pID] = vert;


  }
  }